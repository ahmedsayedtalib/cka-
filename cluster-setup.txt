# ====================================================================
# Kubernetes Cluster Setup Script (Single Node)
# ====================================================================

# --- Phase 1: Cleanup any previous installation ---

# Resetting the current kubeadm installation and removing Kubernetes components
sudo kubeadm reset

# Manually deleting leftover configuration files
sudo rm -f $HOME/.kube/config
sudo rm -rf /etc/cni/net.d

# Resetting all iptables rules
sudo iptables -F && sudo iptables -t nat -F && sudo iptables -t raw -F && sudo iptables -t mangle -F
sudo iptables -P INPUT ACCEPT
sudo iptables -P FORWARD ACCEPT
sudo iptables -P OUTPUT ACCEPT

# Restarting Docker to clear any "stuck" containers from the old cluster
sudo systemctl restart docker

# --- Phase 2: Initialize a new cluster ---

# Initializing the Kubernetes control-plane on this node
sudo kubeadm init --pod-network-cidr=10.244.0.0/16

# Setting up kubectl access for the current user
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Installing the Flannel pod network
kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

# --- Phase 3: Fix common network issues ---

# Enabling the kernel module required by Flannel
sudo modprobe br_netfilter

# Persisting the bridge-nf-call-iptables setting
sudo sysctl -w net.bridge.bridge-nf-call-iptables=1
echo 'net.bridge.bridge-nf-call-iptables=1' | sudo tee -a /etc/sysctl.conf

# Deleting the Flannel pod to force it to restart with the new kernel settings
# NOTE: Replace the pod name with the correct one from `kubectl get pods -n kube-flannel`
# kubectl delete pod -n kube-flannel <your-flannel-pod-name>

# --- Phase 4: Verification (run after waiting a couple of minutes) ---

# Check the status of the node (should be "Ready")
kubectl get nodes

# Check the status of all system pods (all should be "Running")
kubectl get pods --all-namespaces
